Balanced Binary Tree
** Given a binary tree, determine if it is height-balanced

class Solution {
    public int height(TreeNode root){
        if(root==null){
            return 0 ;
        }
        return Math.max(height(root.left),height(root.right))+1;

    }
    public boolean isBalanced(TreeNode root) {
      if(root==null){
          return true;
      }
          int x=height(root.left);
          int y=height(root.right);
          if(isBalanced(root.left) && isBalanced(root.right)){
            if(Math.abs(x-y)==-1|| Math.abs(x-y)==1 || x-y==0){
                return true;
          }
            else{
                return false;
          }
      }return false;     

    }
}

Minimum Depth of Binary Tree
** Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

class Solution {
    public int minDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        else{
            int l=minDepth(root.left);
            int r=minDepth(root.right);
            if(l==0 && r!=0){
                return r+1;
            }
            else if(r==0 && l!=0){
                return l+1;
            }
            return Math.min(l,r)+1;
        }
        
    }
}

Diameter of Binary Tree
** Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them

class Solution {
    public int ht(TreeNode root){
        if(root==null){
            return 0;
        }
        else{
            int lt=ht(root.left);
            int rt=ht(root.right);
            return Math.max(lt,rt)+1;

        }
    }
    int max=0;
    public int diameterOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        }
        int left=ht(root.left);
        int right=ht(root.right);
        if(left+right>max){
            max=left+right;
        }
        diameterOfBinaryTree(root.left);
        diameterOfBinaryTree(root.right);
        return max;
    }
}

 Binary Tree Inorder Traversal
 ** Given the root of a binary tree, return the inorder traversal of its nodes' values.
 class Solution {
    List<Integer> list = new ArrayList<Integer>();
    public List<Integer> inorderTraversal(TreeNode root) {
                if(root == null)
            return list;
        TreeNode ptr = root;
        traversal(ptr);
        return list;
    }
    public void traversal (TreeNode root)
    {
        if(root == null)
            return;
        traversal(root.left);
        list.add(root.val);
        traversal(root.right);

    }
}

Binary Tree Preorder Traversal
** Given the root of a binary tree, return the preorder traversal of its nodes' values.
class Solution {
    List<Integer> list = new ArrayList<Integer>();
    public List<Integer> preorderTraversal(TreeNode root) {
                if(root == null)
            return list;
        TreeNode ptr = root;
        traversal(ptr);
        return list;
    }
    public void traversal (TreeNode root)
    {
        if(root == null)
            return;
        list.add(root.val);
        traversal(root.left);
        traversal(root.right);


        
    }
}
Binary Tree Postorder Traversal
**Given the root of a binary tree, return the postorder traversal of its nodes' values.
class Solution {
        List<Integer> list = new ArrayList<Integer>();
    public List<Integer> postorderTraversal(TreeNode root) {
                if(root == null)
            return list;
        TreeNode ptr = root;
        traversal(ptr);
        return list;
    }
    public void traversal (TreeNode root)
    {
        if(root == null)
            return;
        traversal(root.left);
        traversal(root.right);
        list.add(root.val);


        
    }
}
