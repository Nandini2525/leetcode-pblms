class Pair{
            int row;
            int col;
            Pair(int row,int col){
                this.row=row;
                this.col=col;
            }
        }
class Solution {
    public int orangesRotting(int[][] grid) {
        int t=0;
        int c1=0;
        Queue<Pair> q=new LinkedList<>();
        int m=grid.length;
        int n=grid[0].length;
        int x[]={-1,0,1,0};
        int y[]={0,1,0,-1};
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j));
                }
            }
        }
        while(!q.isEmpty()){
              int s=q.size();
              int k=0;
              for(int i=0;i<s;i++){
                  Pair p=q.poll();
                  int a=p.row;
                  int b=p.col;
                  for(int j=0;j<4;j++){
                      int r=a+x[j];
                      int c=b+y[j];
                      if(r>=0 && c>=0 && r<m && c<n){
                      if(grid[r][c]==1){
                          grid[a+x[j]][b+y[j]]=2;
                          k=1;
                          q.add(new Pair(a+x[j],b+y[j]));
                      }
                      }
                      else{
                          continue;
                      }
                  }
              }if(k==1){
                  t++;
              }
        }for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    c1=1;
                }
            }
        }
        if(c1==1){
            return -1;
        }
        return t;

    }
}
