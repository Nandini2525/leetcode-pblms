Lowest Common Ancestor of a Binary Tree
** Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return null;
        }
        if(root==p){
            return(p);
        }
        if(root==q){
            return(q);
        }
        else{
        TreeNode left=lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        if(left==null && right==null){
            return null;
        }
         else if(left==null){
            return(right);
        }
        else if(right==null){
            return(left);
        }
        return root;
        }
        
    }
}

Maximum Depth of Binary Tree
** Given the root of a binary tree, return its maximum depth.
A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        int left=maxDepth(root.left);
        int right=maxDepth(root.right);
        return Math.max(left,right)+1;
        }
        }

